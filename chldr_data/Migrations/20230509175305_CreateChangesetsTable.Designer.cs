// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using chldr_tools;

#nullable disable

namespace chldr_data.Migrations
{
    [DbContext(typeof(SqlContext))]
    [Migration("20230509175305_CreateChangesetsTable")]
    partial class CreateChangesetsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("chldr_data.Entities.SqlActivity", b =>
                {
                    b.Property<string>("ActivityId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("activity_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("new_value");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("ObjectClass")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("object_class");

                    b.Property<string>("ObjectId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("object_id");

                    b.Property<string>("ObjectProperty")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("object_property");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("old_value");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("user_id");

                    b.HasKey("ActivityId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "fk_user_id_idx");

                    b.ToTable("activity", (string)null);
                });

            modelBuilder.Entity("chldr_data.Entities.SqlEntry", b =>
                {
                    b.Property<string>("EntryId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("entry_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Rate")
                        .HasColumnType("int")
                        .HasColumnName("rate");

                    b.Property<string>("RawContents")
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)")
                        .HasColumnName("raw_contents");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("source_id");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("user_id");

                    b.HasKey("EntryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SourceId" }, "fk_entry_source_id");

                    b.HasIndex(new[] { "UserId" }, "fk_entry_user_id");

                    b.ToTable("entry", (string)null);
                });

            modelBuilder.Entity("chldr_data.Entities.SqlImage", b =>
                {
                    b.Property<string>("ImageId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("image_id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EntryId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("entry_id");

                    b.Property<string>("FileName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("file_name");

                    b.Property<int>("Rate")
                        .HasColumnType("int")
                        .HasColumnName("rate");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("user_id");

                    b.HasKey("ImageId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EntryId" }, "fk_image_entry_id");

                    b.HasIndex(new[] { "UserId" }, "fk_image_user_id");

                    b.ToTable("image", (string)null);
                });

            modelBuilder.Entity("chldr_data.Entities.SqlLanguage", b =>
                {
                    b.Property<string>("LanguageId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("language_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("user_id");

                    b.HasKey("LanguageId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "fk_language_user_id");

                    b.ToTable("language", (string)null);
                });

            modelBuilder.Entity("chldr_data.Entities.SqlPhrase", b =>
                {
                    b.Property<string>("PhraseId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("phrase_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(20000)")
                        .HasColumnName("content");

                    b.Property<string>("EntryId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("entry_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)")
                        .HasColumnName("notes");

                    b.HasKey("PhraseId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EntryId" }, "entry_id_UNIQUE")
                        .IsUnique();

                    b.ToTable("phrase", (string)null);
                });

            modelBuilder.Entity("chldr_data.Entities.SqlQuery", b =>
                {
                    b.Property<string>("QueryId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("query_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("user_id");

                    b.HasKey("QueryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "fk_query_user_id");

                    b.ToTable("query", (string)null);
                });

            modelBuilder.Entity("chldr_data.Entities.SqlSound", b =>
                {
                    b.Property<string>("SoundId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("sound_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EntryId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("entry_id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("file_name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("user_id");

                    b.HasKey("SoundId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EntryId" }, "fk_sound_entry_id");

                    b.HasIndex(new[] { "UserId" }, "fk_sound_user_id");

                    b.ToTable("sound", (string)null);
                });

            modelBuilder.Entity("chldr_data.Entities.SqlSource", b =>
                {
                    b.Property<string>("SourceId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("source_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("notes");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("user_id");

                    b.HasKey("SourceId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "fk_source_user_id");

                    b.ToTable("source", (string)null);
                });

            modelBuilder.Entity("chldr_data.Entities.SqlText", b =>
                {
                    b.Property<string>("TextId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("text_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(20000)")
                        .HasColumnName("content");

                    b.Property<string>("EntryId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("entry_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)")
                        .HasColumnName("notes");

                    b.HasKey("TextId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EntryId" }, "entry_id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("entry_id_UNIQUE1");

                    b.ToTable("text", (string)null);
                });

            modelBuilder.Entity("chldr_data.Entities.SqlToken", b =>
                {
                    b.Property<string>("TokenId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("token_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiresIn")
                        .HasColumnType("datetime")
                        .HasColumnName("expires_in");

                    b.Property<int?>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("value");

                    b.HasKey("TokenId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "fk_tokens_user_id_idx");

                    b.ToTable("tokens", (string)null);
                });

            modelBuilder.Entity("chldr_data.Entities.SqlTranslation", b =>
                {
                    b.Property<string>("TranslationId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("translation_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("varchar(10000)")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EntryId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("entry_id");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("language_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("notes");

                    b.Property<int>("Rate")
                        .HasColumnType("int")
                        .HasColumnName("rate");

                    b.Property<string>("RawContents")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("varchar(10000)")
                        .HasColumnName("raw_contents");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("user_id");

                    b.HasKey("TranslationId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EntryId" }, "fk_translation_entry_id");

                    b.HasIndex(new[] { "LanguageId" }, "fk_translation_language_id");

                    b.HasIndex(new[] { "UserId" }, "fk_translation_user_id");

                    b.ToTable("translation", (string)null);
                });

            modelBuilder.Entity("chldr_data.Entities.SqlUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("user_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("image_path");

                    b.Property<byte?>("IsModerator")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("is_moderator");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("password");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("patronymic");

                    b.Property<int>("Rate")
                        .HasColumnType("int")
                        .HasColumnName("rate");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<byte?>("UserStatus")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("user_status");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("chldr_data.Entities.SqlWord", b =>
                {
                    b.Property<string>("WordId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("word_id");

                    b.Property<string>("AdditionalDetails")
                        .HasColumnType("json")
                        .HasColumnName("additional_details");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("varchar(10000)")
                        .HasColumnName("content");

                    b.Property<string>("EntryId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("entry_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)")
                        .HasColumnName("notes");

                    b.Property<int?>("PartOfSpeech")
                        .HasColumnType("int")
                        .HasColumnName("part_of_speech");

                    b.HasKey("WordId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EntryId" }, "entry_id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("entry_id_UNIQUE2");

                    b.ToTable("word", (string)null);
                });

            modelBuilder.Entity("chldr_data.SqlEntities.SqlChangeSet", b =>
                {
                    b.Property<string>("ChangeSetId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("changeset_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Operation")
                        .HasColumnType("int")
                        .HasColumnName("operation");

                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    b.Property<int>("RecordType")
                        .HasColumnType("int")
                        .HasColumnName("record_type");

                    b.Property<long>("SequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence_number")
                        .HasDefaultValueSql("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("user_id");

                    b.HasKey("ChangeSetId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "fk_changesets_user_id_idx");

                    b.ToTable("changesets", (string)null);
                });

            modelBuilder.Entity("chldr_tools.SqlEfmigrationshistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__efmigrationshistory", (string)null);
                });

            modelBuilder.Entity("chldr_data.Entities.SqlActivity", b =>
                {
                    b.HasOne("chldr_data.Entities.SqlUser", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("chldr_data.Entities.SqlEntry", b =>
                {
                    b.HasOne("chldr_data.Entities.SqlSource", "Source")
                        .WithMany("Entries")
                        .HasForeignKey("SourceId")
                        .IsRequired()
                        .HasConstraintName("fk_entry_source_id");

                    b.HasOne("chldr_data.Entities.SqlUser", "User")
                        .WithMany("Entries")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_entry_user_id");

                    b.Navigation("Source");

                    b.Navigation("User");
                });

            modelBuilder.Entity("chldr_data.Entities.SqlImage", b =>
                {
                    b.HasOne("chldr_data.Entities.SqlEntry", "Entry")
                        .WithMany("Images")
                        .HasForeignKey("EntryId")
                        .IsRequired()
                        .HasConstraintName("fk_image_entry_id");

                    b.HasOne("chldr_data.Entities.SqlUser", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_image_user_id");

                    b.Navigation("Entry");

                    b.Navigation("User");
                });

            modelBuilder.Entity("chldr_data.Entities.SqlLanguage", b =>
                {
                    b.HasOne("chldr_data.Entities.SqlUser", "User")
                        .WithMany("Languages")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_language_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("chldr_data.Entities.SqlPhrase", b =>
                {
                    b.HasOne("chldr_data.Entities.SqlEntry", "Entry")
                        .WithOne("Phrase")
                        .HasForeignKey("chldr_data.Entities.SqlPhrase", "EntryId")
                        .IsRequired()
                        .HasConstraintName("fk_phrase_user_id");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("chldr_data.Entities.SqlQuery", b =>
                {
                    b.HasOne("chldr_data.Entities.SqlUser", "User")
                        .WithMany("Queries")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_query_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("chldr_data.Entities.SqlSound", b =>
                {
                    b.HasOne("chldr_data.Entities.SqlEntry", "Entry")
                        .WithMany("Sounds")
                        .HasForeignKey("EntryId")
                        .IsRequired()
                        .HasConstraintName("fk_sound_entry_id");

                    b.HasOne("chldr_data.Entities.SqlUser", "User")
                        .WithMany("Sounds")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_sound_user_id");

                    b.Navigation("Entry");

                    b.Navigation("User");
                });

            modelBuilder.Entity("chldr_data.Entities.SqlSource", b =>
                {
                    b.HasOne("chldr_data.Entities.SqlUser", "User")
                        .WithMany("Sources")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_source_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("chldr_data.Entities.SqlText", b =>
                {
                    b.HasOne("chldr_data.Entities.SqlEntry", "Entry")
                        .WithOne("Text")
                        .HasForeignKey("chldr_data.Entities.SqlText", "EntryId")
                        .IsRequired()
                        .HasConstraintName("fk_text_entry_id");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("chldr_data.Entities.SqlToken", b =>
                {
                    b.HasOne("chldr_data.Entities.SqlUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tokens_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("chldr_data.Entities.SqlTranslation", b =>
                {
                    b.HasOne("chldr_data.Entities.SqlEntry", "Entry")
                        .WithMany("Translations")
                        .HasForeignKey("EntryId")
                        .IsRequired()
                        .HasConstraintName("fk_translation_entry_id");

                    b.HasOne("chldr_data.Entities.SqlLanguage", "Language")
                        .WithMany("Translations")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("fk_translation_language_id");

                    b.HasOne("chldr_data.Entities.SqlUser", "User")
                        .WithMany("Translations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_translation_user_id");

                    b.Navigation("Entry");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("chldr_data.Entities.SqlWord", b =>
                {
                    b.HasOne("chldr_data.Entities.SqlEntry", "Entry")
                        .WithOne("Word")
                        .HasForeignKey("chldr_data.Entities.SqlWord", "EntryId")
                        .IsRequired()
                        .HasConstraintName("fk_word_entry_id");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("chldr_data.SqlEntities.SqlChangeSet", b =>
                {
                    b.HasOne("chldr_data.Entities.SqlUser", "User")
                        .WithMany("ChangeSets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_changesets_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("chldr_data.Entities.SqlEntry", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Phrase");

                    b.Navigation("Sounds");

                    b.Navigation("Text");

                    b.Navigation("Translations");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("chldr_data.Entities.SqlLanguage", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("chldr_data.Entities.SqlSource", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("chldr_data.Entities.SqlUser", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("ChangeSets");

                    b.Navigation("Entries");

                    b.Navigation("Images");

                    b.Navigation("Languages");

                    b.Navigation("Queries");

                    b.Navigation("Sounds");

                    b.Navigation("Sources");

                    b.Navigation("Tokens");

                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
