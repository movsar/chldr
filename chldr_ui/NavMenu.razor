@inject IStringLocalizer<AppLocalizations> Localizer;
@inject UserStore UserStore;
@inject ContentStore ContentStore;

<div class="top-row ps-3 navbar navbar-dark">
    <a class="navbar-brand" href="">
        <img class="navbar-logo" src="_content/chldr_ui/images/logo.png">
    </a>

    <div class="container-fluid">
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> @Localizer["Home"]
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="index">
                <span class="oi oi-text" aria-hidden="true"></span> @Localizer["Index"]
            </NavLink>
        </div>

        @if (UserStore.CurrentUser != null)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="profile">
                    <span class="oi oi-person" aria-hidden="true"></span> @Localizer["Profile"]
                </NavLink>
            </div>
            <span class="alert-success">@UserStore.CurrentUser.Email</span>
        }


        @if (UserStore.CurrentUser == null)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="oi oi-account-login" aria-hidden="true"></span> @Localizer["Log_in"]
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    protected override Task OnParametersSetAsync()
    {
        UserStore.LoggedInUserChanged += () =>
        {
            InvokeAsync(() =>
          {
              StateHasChanged();
          });
        };

        return base.OnParametersSetAsync();
    }
}
